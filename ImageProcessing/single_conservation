def single_conversion(rc,XY, mode=0):
    '''
    This function utilized distance between points to convert the image coordinate into real coordinates.
    Assume that all the points are alligned and from which fit the optimize cirve and derive the conversion function.
    The fitting approach is the non-linear square.
    rc: points with image coordinates (nx2 array format)
    XY: points with real coordinates (nx2 array fromat)
    Mode: Determine the projection approach.
    0: use only single vector to convert the coordinates.
    '''
    lbc = min(rc[:,1]-10)
    rbc = max(rc[:,1]+10)
    
    # Non-linear least squares to fit a function
    # Approach 1 : exp 
    def func_exp(x, a ,b, c):
        return a*np.exp(-b*x)+c
    popt_exp, pcov_exp = curve_fit(func_exp, rc[:,1], XY[:,1])
    
    # Approach 2 : linear 
    z_1 = np.polyfit(rc[:,1], XY[:,1], 1)
    p_1 = np.poly1d(z_1)
    
    # Approach 3 : polynomial 2 
    z_2 = np.polyfit(rc[:,1], XY[:,1], 2)
    p_2 = np.poly1d(z_2)
    
     # Approach 4 : polynomial 3 
    z_3 = np.polyfit(rc[:,1], XY[:,1], 3)
    p_3 = np.poly1d(z_3)

              
    xp = np.linspace(lbc,rbc)
    plt.figure(figsize = (8,6))
    # raw data
    plt.scatter(rc[:,1], XY[:,1], c='blue', edgecolors='none', label = 'Raw data')
    # fit 1 
    plt.plot(rc[:,1], func_exp(rc[:,1], *popt_exp), label = "exp")
    # fit 2
    plt.plot(xp, p_1(xp), '--', label = '1st polynomial')
    # fit 3
    plt.plot(xp, p_2(xp), '--', label = '2rd polynomial')
    # fit 4
    plt.plot(xp, p_3(xp), '--', label = '3rd polynomial')
    
    
    plt.xlabel("rc coordinate : c", fontsize = 12)
    plt.ylabel("XY coordinates : Y", fontsize = 12)
    plt.legend()
    plt.show()
    
    return p_1, p_2, p_3